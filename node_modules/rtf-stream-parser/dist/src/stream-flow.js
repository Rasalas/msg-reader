"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.streamFlow = void 0;
function streamFlow(stream1, ...streams) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, _reject) => {
            const reject = (err) => {
                stream1.unpipe();
                for (let i = 1; i < streams.length; i++) {
                    streams[i - 1].unpipe();
                }
                _reject(err);
            };
            if (streams.length) {
                stream1.pipe(streams[0]);
            }
            for (let i = 1; i < streams.length; i++) {
                streams[i - 1].pipe(streams[i]);
            }
            stream1.on('error', reject);
            for (let i = 0; i < streams.length; i++) {
                streams[i].on('error', reject);
            }
            const sout = streams.length ? streams[streams.length - 1] : stream1;
            const output = [];
            sout.on('readable', () => {
                while (true) {
                    const piece = sout.read();
                    if (piece === null) {
                        break;
                    }
                    output.push(piece);
                }
            });
            sout.on('end', () => resolve(output));
        });
    });
}
exports.streamFlow = streamFlow;
